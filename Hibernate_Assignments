1. Create a class Student and make a mapping file to map this class. In Student class, Take studentRollno,name,age from user. Sno will be id by default. 
   Create a table maually.
 Ans:
 Bean Class:
 package org.prog;

public class Student {
	private int sno,Srollno,Sage;
	private String Sname;
	public int getSno() {
		return sno;
	}
	public void setSno(int sno) {
		this.sno = sno;
	}
	public int getSrollno() {
		return Srollno;
	}
	public void setSrollno(int srollno) {
		Srollno = srollno;
	}
	public int getSage() {
		return Sage;
	}
	public void setSage(int sage) {
		Sage = sage;
	}
	public String getSname() {
		return Sname;
	}
	public void setSname(String sname) {
		Sname = sname;
	}
	public Student() {
		super();
	}
	public Student(int srollno, int sage, String sname) {
		super();
		Srollno = srollno;
		Sage = sage;
		Sname = sname;
	}	
}

cfg.xml:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory >
        <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <mapping resource="Student.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
hbm.xml:
<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated Feb 17, 2021 5:52:19 PM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="org.prog.Student" table="tabHiQ1">
        <id name="sno" type="int">
            <column name="SNO" />
            <generator class="increment" />
        </id>
        <property name="Srollno" type="int">
            <column name="SROLLNO" />
        </property>
        <property name="Sage" type="int">
            <column name="SAGE" />
        </property>
        <property name="Sname" type="java.lang.String">
            <column name="SNAME" />
        </property>
    </class>
</hibernate-mapping>
SaveCtl.java:
package org.prog;
import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class SaveCtl {
	

	public static void main(String[] args) {
		int temp,rollno,age;
		String name;
		
		Scanner sc=new Scanner(System.in);
		
     SessionFactory sf=new Configuration().configure().buildSessionFactory();  
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		System.out.println("Enter number of student to login : ");
		temp=sc.nextInt();
		Student[] so=new Student[(temp)];
		int i;
		for(i=0;i<temp;i++)
		{
			System.out.println("Student  "+i);
			
			System.out.println("Enter Rollno :");
			rollno=sc.nextInt();
			
			sc.nextLine();
			
			System.out.println("Enter Name ");
			name=sc.nextLine();
			
			System.out.println("Enter Age :");
			age=sc.nextInt();
			
			so[i]=new Student(rollno,age,name);
			
			s.save(so[i]);
			
		}
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		System.out.println("Record Save..");
		
		sc.close();
		
	}
}
SQl:
create table tabHiQ1 (sno number primary key , Srollno number ,Sname varchar2(15), Sage number);

Select * from tabHiQ1;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Create a class Student and make a mapping file to map this class. In Student class, Take studentRollno,name,age from user. Sno will be id by default. 
   Table should be created by hibernate and the records in the table should be updated.
 Ans:
  Bean Class:
 package org.prog;

public class Student {
	private int sno,Srollno,Sage;
	private String Sname;
	public int getSno() {
		return sno;
	}
	public void setSno(int sno) {
		this.sno = sno;
	}
	public int getSrollno() {
		return Srollno;
	}
	public void setSrollno(int srollno) {
		Srollno = srollno;
	}
	public int getSage() {
		return Sage;
	}
	public void setSage(int sage) {
		Sage = sage;
	}
	public String getSname() {
		return Sname;
	}
	public void setSname(String sname) {
		Sname = sname;
	}
	public Student() {
		super();
	}
	public Student(int srollno, int sage, String sname) {
		super();
		Srollno = srollno;
		Sage = sage;
		Sname = sname;
	}	
}

cfg.xml:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory >
        <property name="hbm2ddl.auto">Create</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <mapping resource="Student.hbm.xml"/>
    </session-factory>
</hibernate-configuration>

hbm.xml:
<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated Feb 17, 2021 5:52:19 PM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="org.prog.Student" table="tabHiQ1">
        <id name="sno" type="int">
            <column name="SNO" />
            <generator class="increment" />
        </id>
        <property name="Srollno" type="int">
            <column name="SROLLNO" />
        </property>
        <property name="Sage" type="int">
            <column name="SAGE" />
        </property>
        <property name="Sname" type="java.lang.String">
            <column name="SNAME" />
        </property>
    </class>
</hibernate-mapping>
SaveCtl.java:
package org.prog;
import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class SaveCtl {
	

	public static void main(String[] args) {
		int temp,rollno,age;
		String name;
		
		Scanner sc=new Scanner(System.in);
		
     SessionFactory sf=new Configuration().configure().buildSessionFactory();  
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		System.out.println("Enter number of student to login : ");
		temp=sc.nextInt();
		Student[] so=new Student[(temp)];
		int i;
		for(i=0;i<temp;i++)
		{
			System.out.println("Student  "+i);
			
			System.out.println("Enter Rollno :");
			rollno=sc.nextInt();
			
			sc.nextLine();
			
			System.out.println("Enter Name ");
			name=sc.nextLine();
			
			System.out.println("Enter Age :");
			age=sc.nextInt();
			
			so[i]=new Student(rollno,age,name);
			
			s.save(so[i]);
			
		}
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		System.out.println("Record Save..");
		
		sc.close();
		
	}
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Make a class Account which has fields like accno,name & acctype. Acoount class will be Entity class. Take data from user and the table will be created automatically.
 Ans:
 Entity class:
 package org.prog;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "tabHiQ3")
class BankAccount {
	
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE)
	@Column(name = "AccNo")
	private int accno;
	
	@Column(name = "AccName")
	private String name;
	
	@Column(name = "AccType")
	private String acctype;
	
	public int getAccno() {
		return accno;
	}
	public void setAccno(int accno) {
		this.accno = accno;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getAcctype() {
		return acctype;
	}
	public void setAcctype(String acctype) {
		this.acctype = acctype;
	}
	/*public BankAccount(int accno, String name, String acctype) {
		super();
		this.accno = accno;
		this.name = name;
		this.acctype = acctype;
	}*/
	public BankAccount() {
		super();
	}	
}

cfg.xml:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory >
        <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
    </session-factory>
</hibernate-configuration>

SaveCtl.java:
package org.prog;

import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class BankSaveCtl {

	public static void main(String[] args) {
		int temp=0,Accno;
		String Accname,Acctype;
		
		Scanner sc=new Scanner(System.in);
		
		SessionFactory sf=new Configuration().configure().addAnnotatedClass(BankAccount.class).buildSessionFactory();  
			
		Session s=sf.openSession();
			
		s.beginTransaction();
		
		BankAccount bn=new BankAccount();
		
		System.out.println("Enter Account Number :");
		Accno=sc.nextInt();
		
		sc.nextLine();
		
		System.out.println("Enter Account Holder Name ");
		Accname=sc.nextLine();
		
		System.out.println("Enter Account Type :");
		Acctype=sc.nextLine();
		
		bn.setAccno(Accno);
		bn.setName(Accname);
		bn.setAcctype(Acctype);
		
		s.saveOrUpdate(bn);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		System.out.println("Record Save..");
		
		sc.close();
	}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. Create a hibernate project in Maven which is a Dynamic web Project and Create a mapping file for the POJO class.Two JSP pages(A,B) will be created.First Jsp will 
   accepts username,Password and stores the deails in the logintable. In the same project Create another servlet which updates the password in the table. Create a 
   seperate JSP to update the password.Once the record is saved in table then second JSP page will display the message as "Record submitted".
 Ans:
  Form01.jsp:
  <%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h2>A</h2>
<form action="Servlet_A" method="post">
<!--  UserID  : <input type="number" name="ID"><br>  -->
UserName : <input type="text" name="UN"><br>
Password : <input type="password" name="PW"><br>
<input type="submit" value="Login">
</form>
</body>
</html>

Form02.jsp:
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h2>B</h2>
<form action="Servlet_B" method="post">
UserID  : <input type="number" name="ID"><br>
UserName : <input type="text" name="UN"><br>
Old Password : <input type="password" name="OPW"><br>
New Password : <input type="password" name="NPW"><br>
<input type="submit" value="Login">
</form>
</body>
</html>

ServletA.java:
doGet:
                response.setContentType("text/html");
		PrintWriter out = response.getWriter();
		
		String un=request.getParameter("UN");
		String pw=request.getParameter("PW");
		
        SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		Login lo=new Login();
		
		lo.setUserName(un);
		lo.setPassword(pw);
				
		s.save(lo);
		
        s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		out.print("<h3>Your UserID is "+lo.getUserID()+" User "+un+" As login!!</h3>");
		
		out.print("<a href=http://localhost:8081/Hibernate_Assignment_Q4/Form01.jsp>Go Back to Login Page </a><br>");
		out.print("<a href=http://localhost:8081/Hibernate_Assignment_Q4/Form02.jsp >Go to Password Update Page </a>");
ServletB.java:
doGet:
		response.setContentType("text/html");
		PrintWriter out = response.getWriter();
		
		int id=Integer.parseInt(request.getParameter("ID"));
		String un=request.getParameter("UN");
		String opw=request.getParameter("OPW");
		String npw=request.getParameter("NPW");
		
		if(opw!=npw)
		{
        SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		Login lo=s.get(Login.class,id);
		
		lo.setUserName(un);
		lo.setPassword(npw);
				
		s.update(lo);
		
        s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		out.print("<h3>User "+un+" As Update his Password !!</h3>");
		
		}
		else 
		{
		  out.print("<h2>User "+un+" you Type the same old Password !</h2>");
		}
		
		out.print("<a href=http://localhost:8081/Hibernate_Assignment_Q4/Form01.jsp>Go to Login Page </a><br>");
		out.print("<a href=http://localhost:8081/Hibernate_Assignment_Q4/Form02.jsp >Go Back to Password Update Page </a>");
POJO class:
package org.prog;

public class Login {
	private int UserID;
	private String UserName;
	private String Password;
	
	public Login(int userID, String userName, String password) {
		super();
		UserID = userID;
		UserName = userName;
		Password = password;
	}
	public Login() {
		super();
	}
	public int getUserID() {
		return UserID;
	}
	public void setUserID(int userID) {
		UserID = userID;
	}
	public String getUserName() {
		return UserName;
	}
	public void setUserName(String userName) {
		UserName = userName;
	}
	public String getPassword() {
		return Password;
	}
	public void setPassword(String password) {
		Password = password;
	}
}

Login.hbm.xml:
<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated Feb 23, 2021 3:51:16 PM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="org.prog.Login" table="tabHiQ4">
        <id name="UserID" type="int">
            <column name="USERID" />
            <generator class="increment" />
        </id>
        <property name="UserName" type="java.lang.String">
            <column name="USERNAME" />
        </property>
        <property name="Password" type="java.lang.String">
            <column name="PASSWORD" />
        </property>
    </class>
</hibernate-mapping>

Hibernate.cfg.xml:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        <property name="show_sql">true</property>
        <mapping resource="Login.hbm.xml"/>
    </session-factory>
</hibernate-configuration>

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. Make a simple project in Maven using Hibernate to take the details about a Employee like EmpID,Name,Salary. Delete and Update the specific record. 
 Ans:
 Hibernate.cfg.xml:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <mapping resource="Employee_Assignment_05.hbm.xml" />
    </session-factory>
</hibernate-configuration>

Employee.java:
package org.porg;

public class Employee_Assignment_05 {
	
	 private int EmpID;
	 private int Salary;
	 private String Name;
	public int getEmpID() {
		return EmpID;
	}
	public void setEmpID(int empID) {
		EmpID = empID;
	}
	public int getSalary() {
		return Salary;
	}
	public void setSalary(int salary) {
		Salary = salary;
	}
	public String getName() {
		return Name;
	}
	public void setName(String name) {
		Name = name;
	}
	public Employee_Assignment_05(int empID, int salary, String name) {
		super();
		EmpID = empID;
		Salary = salary;
		Name = name;
	}
	public Employee_Assignment_05() {
		super();
	}	 
}

Employee_Assignment_05.hbm.xml:
<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated Feb 23, 2021 9:44:52 AM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="org.porg.Employee_Assignment_05" table="tabHiQ5">
        <id name="EmpID" type="int">
            <column name="EMPID" />
            <generator class="assigned" />
        </id>
        <property name="Salary" type="int">
            <column name="SALARY" />
        </property>
        <property name="Name" type="java.lang.String">
            <column name="NAME" />
        </property>
    </class>
</hibernate-mapping>

Save.java:
package org.porg;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class SaveCtl {

	public static void main(String[] args) {
		
		SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		Employee_Assignment_05 Emp=new Employee_Assignment_05(4021,7500,"Ajay");
		
		s.save(Emp);
		
        s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		System.out.println("Record Save..");

	}

}
Update.java:
package org.porg;

import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;


public class UpdateCtl {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int empid;
		
		SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		//Query q= s.createQuery("update Employee_Assignment_05 set Salary=12000 where Name='Soham'");
		
		//q.executeUpdate();
		

		Employee_Assignment_05 emp=new Employee_Assignment_05();
		
		System.out.println("Enter Employee ID to Update : ");

		empid = sc.nextInt();


		emp.setEmpID(empid);
		

		sc.nextLine();

		emp.setName("Soahm");

		emp.setSalary(14500);

		s.update(emp);
		
        s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		System.out.println("Record Updated !!");
		
		sc.close();

	}

}
Delete.java:
package org.porg;

import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class DeleteCtl {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int empid;
		
		SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		
		Employee_Assignment_05 emp=new Employee_Assignment_05();
		
		System.out.println("Enter Employee ID to Delete : ");

		empid = sc.nextInt();


		emp.setEmpID(empid);

		s.delete(emp);
		
        s.getTransaction().commit();
        
        		
		s.close();
		
		sf.close();
		
		System.out.println("Record Deleted !!");
		
		sc.close();

	}

}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. Create a Maven project in hibernate to perform CRUD Operations. Create a web Application
 Ans:
 Employee_Assignment_06.java:
 package org.porg;

public class Employee_Assignment_06 {
	
	 private int EmpID;
	 private int Salary;
	 private String Name;
	public int getEmpID() {
		return EmpID;
	}
	public void setEmpID(int empID) {
		EmpID = empID;
	}
	public int getSalary() {
		return Salary;
	}
	public void setSalary(int salary) {
		Salary = salary;
	}
	public String getName() {
		return Name;
	}
	public void setName(String name) {
		Name = name;
	}
	public Employee_Assignment_06(int empID, int salary, String name) {
		super();
		EmpID = empID;
		Salary = salary;
		Name = name;
	}
	public Employee_Assignment_06() {
		super();
	}	 
}

CREATE/INSERTED
Save.java:
package org.porg;

import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class saveTest {

	public static void main(String[] args) {
		
		int temp=0,Empid,Salary;
		String Name;
		
		Scanner sc=new Scanner(System.in);
		
		SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		//Employee_Assignment_06 Emp=new Employee_Assignment_06(4021,7500,"Ajay");
		
		//s.save(Emp);
		System.out.println("Enter number of Employee to Enter : ");
		temp=sc.nextInt();
		Employee_Assignment_06[] empo=new Employee_Assignment_06[(temp)];
		int i;
		for(i=0;i<temp;i++)
		{
			System.out.println("Employee  "+i);
			
			System.out.println("Enter Employee ID :");
			Empid=sc.nextInt();
			
			sc.nextLine();
			
			System.out.println("Enter Employee Name ");
			Name=sc.nextLine();
			
			System.out.println("Enter Employee Salary :");
			Salary=sc.nextInt();
			
			empo[i]=new Employee_Assignment_06(Empid,Salary,Name);
			
			s.save(empo[i]);
			
		}
		
        s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		System.out.println("Record Save..");
		
		sc.close();

	}

}

READ/SELECT
select.java:
package org.porg;

import java.util.List;

import javax.persistence.Query;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class selectTest {

	public static void main(String[] args) {
		
		SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
          Query q=s.createQuery("from Employee_Assignment_06");    
		
		List <Employee_Assignment_06>l= q.getResultList();   
		
		for (Employee_Assignment_06 emp : l) {
			System.out.println(emp.getEmpID()+" "+emp.getName()+" "+emp.getSalary());
		}
        
        		
		s.close();
		
		sf.close();
		
		System.out.println("Record Display !!");


	}
}

UPDATE
update.java:
package org.porg;

import javax.persistence.Query;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;


public class updateTest {

	public static void main(String[] args) {
		
		SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		Query q= s.createQuery("update Employee_Assignment_06 set Salary=12000 where Name='Soham'");
		
		q.executeUpdate();

        s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		System.out.println("Record Updated !!");

	}
}

DELETE
delete.java:
package org.porg;

import javax.persistence.Query;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class deleteTest {

	public static void main(String[] args) {
		
		SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		Query q= s.createQuery("delete Employee_Assignment_06 where Name='Ajay'");
		
		q.executeUpdate();

		
        s.getTransaction().commit();
        
        		
		s.close();
		
		sf.close();
		
		System.out.println("Record Deleted !!");


	}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. Create 3 Bean classes named as SBI, IDBI, ICICI. In All classes the dependency is injected in the constructor.Dependency class is InterestRate which has one method
   getRate() which returns the rate of interest according to the bank. Display BankName, Bank Rate.
 Ans: 
 RBI.Interface:
 package org.prog.assingment07;

public interface RBI {
	public String getBankName();
	
	public Double getRateOfInterest();
}
SBI.java:
package org.prog.assingment07;

public class SBI implements RBI {

	public Rate rate;
	public Double r=6.7;

	public SBI(Rate rate) {
		this.rate = rate;
	}

	@Override
	public String getBankName() {
		// TODO Auto-generated method stub
		return "Bank Name is SBI";
	}

	@Override
	public Double getRateOfInterest() {
		// TODO Auto-generated method stub
		return rate.getRate(r);
	}
}
IDBI.java:
package org.prog.assingment07;

public class IDBI implements RBI {

	public Rate rate;
	public Double r=5.8;
	
	public IDBI(Rate rate) {
		this.rate = rate;
	}

	@Override
	public String getBankName() {
		// TODO Auto-generated method stub
		return "Bank Name is IDBI";
	}

	@Override
	public Double getRateOfInterest() {
		// TODO Auto-generated method stub
		return rate.getRate(r);
	}
}
ICICI.java:
package org.prog.assingment07;

public class ICICI implements RBI {

	public Rate rate;
	public Double r=6.3;
	
	
	public ICICI(Rate rate) {
		this.rate = rate;
	}

	@Override
	public String getBankName() {
		// TODO Auto-generated method stub
		return "Bank Name is ICICI";
	}

	@Override
	public Double getRateOfInterest() {
		// TODO Auto-generated method stub
		return rate.getRate(r);
	}
}
ROI.Interface:
package org.prog.assingment07;

public interface ROI {
	public Double getRate( Double r);
}
Rate.java:
package org.prog.assingment07;

public class Rate  implements ROI{

	@Override
	public Double getRate(Double r) {
		// TODO Auto-generated method stub
		return r;
	}
}
Test.java:
package org.prog.assingment07;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Test {

	public static void main(String[] args) {
		ApplicationContext context=new ClassPathXmlApplicationContext("applicationContext.xml");
		//SBI
		RBI obj=context.getBean("SBIobj",RBI.class);
		
		System.out.println(obj.getBankName());
		System.out.println("Rate of Interes is "+obj.getRateOfInterest()+" %");
		System.out.println("----------------------------------------------------");
		
		//IDBI
        RBI obj01=context.getBean("IDBIobj",RBI.class);
		
		System.out.println(obj01.getBankName());
		System.out.println("Rate of Interes is "+obj01.getRateOfInterest()+" %");
		System.out.println("----------------------------------------------------");
		
		//ICICI
        RBI obj02=context.getBean("ICICIobj",RBI.class);
		
		System.out.println(obj02.getBankName());
		System.out.println("Rate of Interes is "+obj02.getRateOfInterest()+" %");
	}
}
applicationContext.xml:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
     <bean id="obj" class="org.prog.assingment07.Rate"></bean>
     
      <bean id="SBIobj" class="org.progassingment07..SBI">
      <constructor-arg ref="obj"></constructor-arg>
      </bean>  
      
      <bean id="ICICIobj" class="org.progassingment07..ICICI">
      <constructor-arg ref="obj"></constructor-arg>
      </bean>
       
      <bean id="IDBIobj" class="org.progassingment07..IDBI">
      <constructor-arg ref="obj"></constructor-arg>
      </bean>   
</beans>

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. Create two bean classes as Student & Product. Make spring configuration file where configure the setter injection for the method which is saving the entered records 
   for the student as rollno,name,percentage in the database and do the same for products
Ans:
appcontext_ASS8.xml:
<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="st" class="ASS_80.student2" />
    
    <bean id="pr" class="ASS_80.product2" />
    
    <bean id="s" class="ASS_80.student" >
    <property name="i1" ref="st" />
    </bean>
    
    <bean id="p" class="ASS_80.product">
    <property name="i2" ref="pr" />
    </bean>

</beans>

student.java:
package ASS_80;

public class student {

	public int rollno;
	public String name;
    public double percent;
    
    INTER i1;
    
	public INTER getI1() {
		return i1;
	}
	public void setI1(INTER i1) {
		this.i1 = i1;
	}
	
	public int getRollno() {
		return rollno;
	}
	public void setRollno(int rollno) {
		this.rollno = rollno;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public double getPercent() {
		return percent;
	}
	public void setPercent(double percent) {
		this.percent = percent;
	}
    
	public String saverecs1()
	{
		return i1.addrec();
	}
}

product.java:
package ASS_80;

public class product {

	public int pid;
	public String pro_nm;
	public int price;
	
	INTER i2;
	
	public INTER getI2() {
		return i2;
	}
	public void setI2(INTER i2) {
		this.i2 = i2;
	}
	
	public int getPid() {
		return pid;
	}
	public void setPid(int pid) {
		this.pid = pid;
	}
	public String getPro_nm() {
		return pro_nm;
	}
	public void setPro_nm(String pro_nm) {
		this.pro_nm = pro_nm;
	}
	public int getPrice() {
		return price;
	}
	public void setPrice(int price) {
		this.price = price;
	}
	
	public String saverecs2()
	{
		return i2.addrec();
	}
}

INTER:
package ASS_80;

public interface INTER {

	public String addrec();
}

student2.java:
package ASS_80;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class student2 implements INTER{

	@Override
	public String addrec() {
		
		Scanner sc = new Scanner(System.in);
		
		try {
		Class.forName("oracle.jdbc.driver.OracleDriver");
		
		Connection cn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","root");
		
		PreparedStatement pmt = cn.prepareStatement("insert into student482 values(?,?,?)");
		
		System.out.println("ENTER ROLLNO OF THE STUDENT : ");
		int roll = sc.nextInt();
		
		sc.nextLine();
		
		pmt.setInt(1,roll );
		
		System.out.println("ENTER NAME OF THE STUDENT : ");
		String name= sc.nextLine();
		
		pmt.setString(2,name );
		
		System.out.println("ENTER PERCENTAGE OF THE STUDENT : ");
		double per = sc.nextDouble();
		
		pmt.setDouble(3,per);
		
		pmt.execute();
		
		pmt.close();
		
		cn.close();
		}
		catch(Exception ea)
		{
			ea.printStackTrace();
		}
		
		return "SUCCESSFULLY INSERTED";
	}
}

product2.java:
package ASS_80;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class product2 implements INTER{

	@Override
	public String addrec() {		
		Scanner sc = new Scanner(System.in);
		
		try {
		Class.forName("oracle.jdbc.driver.OracleDriver");
		
		Connection cn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","root");
		
		PreparedStatement pmt = cn.prepareStatement("insert into product482 values(?,?,?)");
		
		System.out.println("ENTER ID OF THE PRODUCT : ");
		int pid = sc.nextInt();
		
		sc.nextLine();
		
		pmt.setInt(1,pid );
		
		System.out.println("ENTER PRODUCT NAME : ");
		String nm= sc.nextLine();
		
		pmt.setString(2,nm );
		
		System.out.println("ENTER PRODUCT PRICE : ");
		int per = sc.nextInt();
		
		pmt.setDouble(3,per);
		
		pmt.execute();
		
		pmt.close();
		
		cn.close();
		}
		catch(Exception ea)
		{
			ea.printStackTrace();
		}
		
		return "SUCCESSFULLY INSERTED";
	}

}

test:
package ASS_80;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class test {

	public static void main(String[] args) {
    ClassPathXmlApplicationContext con = new ClassPathXmlApplicationContext("appcontext_ASS8.xml");
    
    student s1 = con.getBean("s",student.class);
    
    System.out.println(s1.saverecs1());
    
    product p1 = con.getBean("p",product.class);
    
    System.out.println(p1.saverecs2());

	}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9.Write a spring configuration file which injects the username, email and password to the Bean class User.
 Ans:
appcontext_ass9.xml:
<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="d" class="ASS_9.details" />
    
    <bean id="u" class="ASS_9.user" >
    <constructor-arg ref="d"></constructor-arg>
    </bean>
    
</beans>

user.java:
package ASS_9;

public class user {

	inter i1;
	
	public String us,em,pa;
	
	public user(inter i)
	{
		this.i1 = i;
		this.us = i.getus();
		this.em = i.getem();
		this.pa = i.getpa();
	}

	public inter getI1() {
		return i1;
	}

	public void setI1(inter i1) {
		this.i1 = i1;
	}

	public String getUs() {
		return us;
	}

	public void setUs(String us) {
		this.us = us;
	}

	public String getEm() {
		return em;
	}

	public void setEm(String em) {
		this.em = em;
	}

	public String getPa() {
		return pa;
	}

	public void setPa(String pa) {
		this.pa = pa;
	}
	
	public String st()
	{
		return i1.status();
	}
}

inter_interface.java:
package ASS_9;

public interface inter {

	public String getus();
	
	public String getem();
	
	public String getpa();
	
	public String status();
}

details.java:
package ASS_9;

public class details implements inter{

	@Override
	public String getus() {
		return "ABHISHEK123";
	}

	@Override
	public String getem() {
		return "abhi123@gmail.com";
	}

	@Override
	public String getpa() {
		return "abhishek234";
	}

	public String status()
	{
		return "SUCCESFULLY DISPLAYED";
	}
}

test.java:
package ASS_9;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class test {

	public static void main(String[] args) {
	ClassPathXmlApplicationContext cs = new ClassPathXmlApplicationContext("appcontext_ASS9.xml");
	
	user u1 = cs.getBean("u",user.class);
	
	System.out.println(u1.getUs());
	
	System.out.println(u1.getEm());
	
	System.out.println(u1.getPa());
	
	System.out.println(u1.st());
	
	cs.close();

	}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10.Write the configuration for 2 bean objects in the Spring Configuration file & Retrieve all the bean objects in the testApp using XmlBeanFactory.
 Ans:
appcontext_ASS10.xml:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="class" class="ASS_10.CLASS1"  />
    
    <bean id="bean1" class="ASS_10.BEAN1" >
    <property name="in1" ref="class" />
    </bean>
    
    <bean id="bean2" class ="ASS_10.BEAN2" >
    <property name="in2" ref="class" />
    </bean>
    
</beans>

BEAN1:
package ASS_10;

public class BEAN1 {

	INTER in1;

	public INTER getIn1() {
		return in1;
	}

	public void setIn1(INTER in1) {
		this.in1 = in1;
	}
	
	public void getm()
	{
		in1.getmsg();
	}
	
}

BEAN2:
package ASS_10;

public class BEAN2 {

	INTER in2;

	public INTER getIn2() {
		return in2;
	}

	public void setIn2(INTER in2) {
		this.in2 = in2;
	}
	
	public void getm()
	{
		in2.getmsg();
	}
	
}

INTERFACE:
package ASS_10;

public interface INTER {

	public void getmsg();
}

CLASS1:
package ASS_10;

public class CLASS1 implements INTER{

	@Override
	public void getmsg() {
		System.out.println("MESSAGE CREATED");
	}

	
}
test:
package ASS_10;

import org.springframework.beans.factory.xml.XmlBeanFactory;
import org.springframework.core.io.ClassPathResource;

public class test {

	public static void main(String[] args) {
	XmlBeanFactory bf = new XmlBeanFactory(new ClassPathResource("appcontext_ASS10.xml"));
	
	BEAN1 b1 = bf.getBean("bean1",BEAN1.class);
	
	b1.getm();
	
	BEAN2 b2 = bf.getBean("bean2",BEAN2.class);
	
	b2.getm();
	
	System.out.println(b1);
	
	System.out.println(b2);

	}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11. Make a Bean class which has a method which accepts firstname & lastname as parameters and returns the Fullname. Inject this bean class object into a Class Person
    Print the Details of a person as Fullname & age.
 Ans:
appcontext_ASS11.xml:
<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="i2" class="ASS_11.FULLNM" >
    </bean>
    
    <bean id="i1" class="ASS_11.PERSON" >
    <property name="fn"  ref="i2"></property>
    </bean> 
</beans>

FULLNM.java:
package ASS_11;

import java.util.Scanner;

public class FULLNM {

	public String fnm,lnm;

	Scanner sc;
	
	public String getFnm() {
		return fnm;
	}

	public void setFnm() {
		sc = new Scanner(System.in);
		System.out.println("ENTER FIRST NAME : ");
		String fm = sc.nextLine();
		this.fnm = fm;
	}

	public String getLnm() {
		return lnm;
	}

	public void setLnm() {
		sc = new Scanner(System.in);
		System.out.println("ENTER LAST NAME : ");
		String lm = sc.nextLine();
		this.lnm = lm;
	}
	
}

PERSON.java:
package ASS_11;

public class PERSON {

	public int age;

	public void setAge(int age) {
		this.age = age;
	}

	public int getAge() {
		return age;
	}
	
	FULLNM fn;
	
	public void setFn(FULLNM fn) {
		this.fn = fn;
	}

	public FULLNM getFn() {
		return fn;
	}
	
	public void setnames()
	{
		fn.setFnm();
		fn.setLnm();
	}
	
	public String getfname()
	{
		return fn.getFnm();
	}
	
	public String getlname()
	{
		return fn.getLnm();
	}
	
}

TEST.java:
package ASS_11;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class test {

	public static void main(String[] args) {

	ApplicationContext ac = new ClassPathXmlApplicationContext("appcontext_ASS11.xml");
	
	PERSON p = ac.getBean("i1",PERSON.class);
	
	p.setAge(18);
	
	System.out.println(p.getAge());
	
	p.setnames();
	
	System.out.println("PERSON NAME : "+p.getfname()+" "+p.getlname());
	}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12. Create a spring Project in Maven. Make two bean classes (Annotated) ,In First Bean define a method which is displaying some message .Apply the Injection on this method.
     In second bean Apply the Constructor injection and a method in the bean is displaying fibbonacci series in it.
 Ans:
appcontext_ASS12.xml:
<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <context:component-scan base-package="ASS_12"></context:component-scan>
</beans>

INTERFACE 01:
package ASS_12;

public interface IN {

	public String getmesg();
}

FIRST:
package ASS_12;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component("first")
public class FIRST implements IN{

	INTER i1;
	
	@Autowired
	public FIRST(INTER i)
	{
		this.i1 = i;
	}
	
	public String getmesg()
	{
		return i1.getmsg();
	}
}

INTERFACE:
package ASS_12;

public interface INTER {

	public String getmsg();
}

msg:
package ASS_12;

import org.springframework.stereotype.Component;

@Component
public class msg implements INTER{

	public String getmsg() {
		return "MESSAGE GENERATED FROM THE METHOD";
	}

}

TEST:
package ASS_12;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class test {

	public static void main(String[] args) {
	ApplicationContext ac = new ClassPathXmlApplicationContext("appcontext_ASS12.xml");
	
	IN fr = ac.getBean("first",IN.class);
	
	System.out.println(fr.getmesg());

	IN2 sc = ac.getBean("second",IN2.class);
	
	sc.displayfibonacci();
	}
}

SECOND:
package ASS_12;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component("second")
public class SECOND implements IN2{

   INTER2 i2;
   
   @Autowired
   public SECOND(INTER2 i)
   {
	  this.i2 = i;
   }

public INTER2 getI2() {
	return i2;
}

public void setI2(INTER2 i2) {
	this.i2 = i2;
}
   
public void displayfibonacci()
{
	i2.getfibo();
}
}

INTER2:
package ASS_12;

public interface INTER2 {

	public void getfibo();
}

fibo:
package ASS_12;

import org.springframework.stereotype.Component;

@Component
public class fibo implements INTER2{

	public void getfibo() {
		
		int max = 10, prev= 0, next = 1;
        System.out.print("Fibonacci Series of "+max+" numbers:");

        int i=1;
        while(i <= max)
        {
            System.out.print(prev+" ");
            int sum = prev + next;
            prev = next;
            next = sum;
            i++;
        }
    }

	}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13. Create an interface as Person. Make two classes Student and Manager which are implementing the Person interface.In person interface there are two methods as
    getDetails() and showDetails(). Create a Bean class where Dependency injection should be applied on the field. Make a TestMain class where retrieve the details of 
    Student and manager.
 Ans:
appcontext_ASS13.xml:
<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <context:component-scan base-package="ASS_13"></context:component-scan>
</beans>

testmain.java:
package ASS_13;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class testmain {

	public static void main(String[] args) {
	
	ApplicationContext ac = new ClassPathXmlApplicationContext("appcontext_ASS13.xml");
	
	BEAN b1 = ac.getBean("bean",BEAN.class);
	
	BEAN b2 = ac.getBean("bean",BEAN.class);
	
	b1.getpnm();
	
	b2.getmnm();
	}

}

BEAN:
package ASS_13;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component("bean")
public class BEAN {

	@Autowired
	@Qualifier("student")
	PERSON p1;
	
	public void getpnm()
	{
		p1.getdetails();
		p1.showdetails();
	}
	
	@Autowired
	@Qualifier("manager")
	PERSON p2;
	
	public void getmnm()
	{
		p2.getdetails();
		p2.showdetails();
	}
	
}

PERSON:
package ASS_13;

public interface PERSON {

	public void getdetails();
	
	public void showdetails();
}

student.java:
package ASS_13;

import java.util.Scanner;

import org.springframework.stereotype.Component;

@Component
public class student implements PERSON{
	public String nm;
	public int percent;
	
	public String getNm() {
		return nm;
	}

	public void setNm(String nm) {
		this.nm = nm;
	}

	public int getPercent() {
		return percent;
	}

	public void setPercent(int percent) {
		this.percent = percent;
	}

	@Override
	public void getdetails() {
	Scanner sc = new  Scanner(System.in);
	
	System.out.println("ENTER STUDENT NAME : ");
	String nam = sc.nextLine();
	
	System.out.println("ENTER  PERCENTAGE : ");
	int per = sc.nextInt();
	
	setNm(nam);
	setPercent(per);
	
	}

	@Override
	public void showdetails() {
	System.out.println(getNm()+" ");
    System.out.println(getPercent());
	}
}

manager.java:
package ASS_13;

import java.util.Scanner;

import org.springframework.stereotype.Component;

@Component
public class manager implements PERSON{

	public String nm;
	public int id;
	
	public String getNm() {
		return nm;
	}

	public void setNm(String nm) {
		this.nm = nm;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@Override
	public void getdetails() {
	Scanner sc = new  Scanner(System.in);
	
	System.out.println("ENTER MANAGER NAME : ");
	String nam = sc.nextLine();
	
	System.out.println("ENTER MANAGER ID : ");
	int i = sc.nextInt();
	
	setNm(nam);
	setId(i);
	
	}

	@Override
	public void showdetails() {
	System.out.println(getNm());
    System.out.println(getId());
	}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
14. Make a Spring MVC Project in Maven, Create a registration page where customer Id, firstname, lastname and age is to be taken in the registration form and save data 
    in the database .After submitting data , display the message "Registration Successful".
15  Make a program to apply constructor injection using XML and Annotation.
16  Make a program to apply Setter injection using XML and Annotation.
17  Create a Spring MVC form where two fields have to be taken as Username & Passord. Username & password can not be null & Password must be 8 characters long. If 
    Username is "admin" and password is "abcd" then a success.jsp should display the Message as "Welcome admin". If any errors are there in the fields then show the errors
    on the same page for the text fields.
18  Create bean class Student and access the functionality in the Student class without using any XML configuration file. Use Java code to define configuration.
